#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

include Hooky::Memcached

# Setup
converged_config = converge( Hooky::Memcached::CONFIG_DEFAULTS, payload[:config] || {} )

# make sure the env dir exists
directory "/data/etc/env.d" do
  recursive true
end

# and that it's owned by gomicro
execute "chown gomicro /data/etc/env.d"

(payload[:env] || {}).each do |key, value|
  file "/data/etc/env.d/#{key}" do
    content value
    owner 'gomicro'
    group 'gomicro'
    mode 0444
  end
end

if payload[:logvac_host]
  # Configure narc
  template '/opt/gomicro/etc/narc.conf' do
    variables ({ uid: payload[:component][:uid], logvac: payload[:logvac_host] })
  end

  # ensure log files are created
  ["/var/log/gomicro/cache/current"].each do |log_file|
    if not ::File.exists? "#{log_file}"
      parent = File.expand_path("..", "#{log_file}")
      
      # create the parent directory
      directory parent do
        owner 'gomicro'
        group 'gomicro'
        recursive true
      end
      
      # create the log_file
      file "#{log_file}" do
        owner 'gomicro'
        group 'gomicro'
        mode  0644
      end
    end
  end

  directory '/etc/service/narc'

  file '/etc/service/narc/run' do
    mode 0755
    content <<-EOF
#!/bin/sh -e
export PATH="/opt/local/sbin:/opt/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/gomicro/sbin:/opt/gomicro/bin"

exec /opt/gomicro/bin/narcd /opt/gomicro/etc/narc.conf
    EOF
  end
end

# Install extra packages

# Add extra paths
if payload[:extra_path_dirs] && payload[:extra_path_dirs].length > 0
  directory "/data/etc/env.d" do
    recursive true
    owner 'gomicro'
    group 'gomicro'
  end

  file "/data/etc/env.d/EXTRA_PATHS" do
    content payload[:extra_path_dirs].join(":")
    owner 'gomicro'
    group 'gomicro'
    mode 0444
  end
end

if payload[:extra_packages]
  execute "Install packages" do
    command "/data/bin/pkgin -y in #{payload[:extra_packages].join(' ')}"
    path "/data/sbin:/data/bin:/opt/gomicro/sbin:/opt/gomicro/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    user 'gomicro'
  end
end

if payload[:extra_steps]
  payload[:extra_steps].each_with_index do |cmd, i|

    execute "Extra Step: #{cmd}" do
      command "bash -i -l -c \"#{escape cmd}\""
      cwd "/data"
      path "/data/sbin:/data/bin:/opt/gomicro/sbin:/opt/gomicro/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      user 'gomicro'
    end
  end
end

# Set up cron
if payload[:member][:uid] == 1 && ! payload[:cron_jobs].nil?
  include Hookit::Helper::Cron
  include Hookit::Helper::Shell

  directory '/opt/microbox/cron/'

  payload[:cron_jobs].each_with_index do |job, id|
    template "/opt/microbox/cron/#{job[:id]}" do
      owner 'gomicro'
      source 'cron.erb'
      group 'gomicro'
      mode 0755
      variables ({
        component_uid: payload[:component][:uid],
        member_uid: payload[:member][:uid],
        logvac_host: payload[:logvac_host],
        command: escape_shell_string(job[:command]),
        cron_id: id + 1
      })
    end
  end

  template '/etc/crontab' do
    mode 0644
    variables ({ crons: payload[:cron_jobs] })
  end

end
